import json

cli_d = dict(data='./data',
             results_dir='./"homm3_small_disc_results"',
             models_dir='./"homm3_small_disc_results"',
             name='default',
             new=False,
             load_from=-1,
             image_size=128,
             optimizer='adam',
             fmap_max=512,
             transparent=False,
             greyscale=False,
             batch_size=10,
             gradient_accumulate_every=4,
             num_train_steps=150000,
             lr=2e-4,
             save_every=500,
             evaluate_every=500,
             generate=False,
             generate_types=['default', 'ema'],
             generate_interpolation=False,
             aug_test=False,
             aug_prob=None,
             aug_types=['color'],
             dataset_aug_prob=0.,
             attn_res_layers=[32],
             freq_chan_attn=False,
             disc_output_size=1,
             dual_contrast_loss=False,
             antialias=False,
             interpolation_num_steps=100,
             save_frames=False,
             num_image_tiles=None,
             num_workers=None,
             multi_gpus=False,
             calculate_fid_every=None,
             calculate_fid_num_images=12800,
             clear_fid_cache=False,
             seed=42,
             amp=False,
             show_progress=False,)

general_config = dict(data='./../datasets/homm3_jednostki/processed/',
                      results_dir='./../results/one_discriminator',
                      models_dir='./../models/one_discriminator',
                      name='',
                      latent_dim=256,
                      optimizer='adam',
                      new=False,
                      load_from=-1,
                      batch_size=32,
                      gradient_accumulate_every=4,
                      num_train_steps=50000,
                      save_every=1000,
                      evaluate_every=1000,
                      generate=False,
                      generate_types=['default'],
                      generate_interpolation=False,
                      aug_test=False,
                      aug_prob=None,
                      aug_types=['color', 'offset', 'translation', 'cutout'],
                      dataset_aug_prob=0.,
                      interpolation_num_steps=100,
                      save_frames=False,
                      num_image_tiles=None,
                      num_workers=None,
                      multi_gpus=False,
                      calculate_fid_every=None,
                      calculate_fid_num_images=12800,
                      clear_fid_cache=False,
                      seed=42,
                      amp=False,
                      show_progress=False,
                      image_size=128,
                      transparent=True,
                      )

genarator_config = dict(fmap_max=512,
                        greyscale=False,
                        fmap_inverse_coef=12,
                        attn_res_layers=[32],
                        freq_chan_attn=False,
                        )
not_found_args = [arg for arg in cli_d if arg not in general_config.keys(
) and arg not in genarator_config.keys()]
for arg in not_found_args:
    print(f"{arg}={cli_d[arg]},")

discriminator_config = dict(fmap_max=512,
                            greyscale=False,
                            fmap_inverse_coef=12,
                            attn_res_layers=[32],
                            disc_output_size=1,
                            )

config = dict(general=general_config,
              generator=genarator_config,
              discriminator=discriminator_config)

with open('config.json', 'w') as f:
    json.dump(config, f)
